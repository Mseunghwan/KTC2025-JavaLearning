Chapter 1. 자바 기초 문법 다지기

챕터 1-1
Java - Write Once, Run Anywhere!

JDK - 자바 프로그램을 개발할 때 필요한 개발 도구 모음
--> 구성요소 중 대표적인 두 개?
Javac - 자바 컴파일러
JVM - 자바 가상 머신

Javac(Java Compiler)?
.java로 작성되는 자바 언어를 바이트코드(.class)로 변환해 준다
바이트 코드는 JVM이 해석할 수 있는 코드

JVM(Java Virtual Machine)?
바이트 코드를 해석하고 자바 프로그램을 실행시키는 역할
JVM 덕에 실행환경에 관계없이 자바 프로그램 동작 가능

이 두 가지 대표적인 역할 덕분에 플랫폼 독립적으로 사용 가능

객체지향 - 모든 것이 클래스

모든 것이 객체(class)
--> 자바의 세계는 모두 객체
--> 객체와 클래스는 개념적으론 다르지만 실무에선 혼용
--> 자바에서 코드를 작성할 때 서로 관련있는 기능 하나가 하나의 클래스

거대한 생태계
Java는 오랜 시간 동안 선호되었기에 생태계가 거대하다

챕터 1-2
컴퓨터의 기억방식

RAM, 휘발성, 보조기억장치, 바이트, 비트

주기억장치 - 메모리(RAM : Random Access Memory)
특징 ? 인간의 뇌 같은, 영구적으로 저장 못한다(휘발성) / 빠른 속도

보조기억장치 - 하드디스크(HDD / SSD)
--> 파일을 영구적으로 저장 / 느린 속도

컴퓨터가 메모리를 관리하는 방법(중요)
컴퓨터 메모리는 1바이트 단위로 주소 매겨져 관리
1byte = 8bit
1bit = 0, 1

메모리를 절약하려면?
필요한 데이터 크기를 판단, 적당한 크기를 활용해 저장해야


챕터 1-3
자바 프로젝트 관리

카멜케이스와 스네이크케이스

패키지(폴더)
src는 패키지 X, 그 내부에 생성
패키지 - 폴더처럼 파일(클래스)를 정리, 관리
파일 생성 하면 위에 package ---

클래스 명은 첫 글자가 대문자 + 카멜케이스


챕터 1-4
변수(데이터의 저장 공간)

자료형
--> 데이터의 크기를 결정하는 규칙
boolean(1 byte)
char(2 byte)
byte(1 byte)
short(2 byte)
int(4 byte)
long(8 byte)
float(4 byte) - 약 소수점 6 ~ 7 자리 까지
double(8 byte) - 약 소수점 15 ~ 17 자리 까지

float에 소수점 더 들어가게 되면 반올림 해서 7자리까지 표현한다

형변환
다운 캐스팅 : 큰 데이터 -> 작은 상자
업 캐스팅 : 작은 데이터 -> 큰 상자

문자열 데이터

챕터 1-5
입출력 - 프로그램과 사용자 간 대화

입력(Scanner)
Scanner scanner = new Scanner(System.in);

System.out.print("좋아하는 문장을 입력 : ");
String sentence = scanner.nextLine();
System.out.println("sentence = " + sentence);

숫자는 nextInt()
int intbox = scanner.nextInt();

챕터 1-6
연산자
사칙연산 외 mod 연산(%)
복합대입 연산자 - 누적값 구할 때 자주 사용
증감연산자 - 전위연산, 후위연산
비교연산자(같음, 다름, 크기비교)
논리연산자(&&, ||, !) - 우선순위는 ! -> && -> ||
문자열비교 .equals 사용해야, ==는 메모리 주소를 비교하는 것이기에

챕터 1-7
조건문
if, switch

챕터 1-8
반복문

챕터 1-9
배열
1차원, 2차원 배열

챕터 1-10
메서드 - 모듈화의 시작
메서드 명은 카멜케이스로

반환 자료형, 메서드 이름, 매개변수, 작업내용, 반환값 순


Chapter 2. 객체지향 이해하기
챕터 2-1
클래스와 객체
클래스?
객체를 만들때 필요한 청사진

객체? 실제로 존재하는 것 --> 어떠한 논리나 개념이라고도 할 수

Person.class 만들어 사람 객체 여러개 만들어 보기
객체를 만들때 new라는 키워드 사용
--> 객체를 만드는 과정을 인스턴스화라고 표현한다

클래스 구조는 속성, 생성자, 기능

생성자 - 조립설명서
--> 객체를 만들때 사용
--> 생성자가 없으면 클래스를 객체화 시킬 수 없다
--> 생성자 명시하지 않아도 인스턴스화 할 수 있는 이유? 기본 생성자

2-2 JVM 메모리 영역

JVM 메모리 구조
크게 Method Area, Stack Area, Heap Area
Method Area : 파일들이 착착 쌓여있는
Stack Area : 접시 쌓듯 프로그램 실행에 따라 쌓이는 메서드들
Heap Area : 객체가 저장되어 있는 공간

Main 이라는 접시 안에 이름, 나이 다 쌓임
person 객체 생성하면, 객체는 Heap 영역안이라
생성자 호출해 name, age 지정해주면 Heap 영역에 쌓인다
생성자 끝나고 객체가 완전히 Heap에 생성되고,
personA가 객체를 가리키는게 아니라 객체의 힙 영역의 위치를 가리킨다

personA.introduce 실행하면
메인 접시(Stack)에서 frame이 하나 더 쌓인다 - 그게 끝나면 접시에서 빠져나감
Stack 내 각 접시들 끼리 가진 변수는 지역변수 이기 때문에(접시 내에 있으니)
다른 접시에서 호출 불가

Method(static) 영역 이해하기
--> 프로그램 실행 시 작성한 모든 파일의 데이터가 Method(static) 영역에 저장
--> 프로그램 실행 시점에 한 번만 저장
--> Method 영역에 저장된 데이터는 프로그램 전체에서 공용 활용 가능
--> static으로 선언된 변수와 메서드들이 이 공간에 위치, 공용사용 가능

Heap 영역 이해하기
--> new 키워드로 생성된 객체는 Heap 영역에 저장
--> 객체를 생성해서 저장되는 공간이기에 다른 곳에서 변수에 담아주면
--> 객체가 담겨지는게 아닌 객체의 메모리 위치를 담는 것

Stack 영역 이해하기
--> 메소드가 호출될 때 마다 Stack 영역에 메모리가 할당
--> 하나의 접시(스택 프레임)에 각 메서드의 지역변수가 저장
--> 이 영역은 접시 쌓듯 LIFO(Last In First Out) - 후입 선출
--> 메서드 시작 되면 추가되고 종료되면 사라지는 구조
--> 특정 메서드 실행 되면 메서드 정보와 변수가 Stack에 저장되고 끝나면 제거
--> 메서드 내 선언된 지역변수들이 저장되는 공간
--> 변수에 객체 담기면 객체 주소값이 저장

2-3 래퍼클래스(기본형 참조형)
래퍼클래스?
기본자료형을 객체로 감싸는 클래스
기본자료형 래퍼클래스
byte Byte
short Short
int Integer
long Long
float Float
double Double
char Character
boolean Boolean

기본형(자료형)
참조형? 변수에 객체가 담기면 해당 변수를 참조형 변수라고 함
참조형 변수는 데이터가 저장된 메모리 주소를 가리킴 --> Heap 메모리 주소
객체 데이터는 Heap 영역에 저장되어 있기 때문
객체, 배열 등이 참조형에 속함

래퍼클래스 활용
public static void main(String[] args) {
        int a = 1;
        System.out.println("a = " + a);

        Person personA = new Person("h", 3);
        System.out.println("person = " + personA);

        int[] arr = {1, 2, 3, 4, 5};
        System.out.println("arr = " + arr);

        // 래퍼클래스(기본형 변수를 감싸고 있는 클래스)
        // 참조형 변수 입니다
        Integer num = 100;
        System.out.println("num = " + num);
        // 이렇게 하면 래퍼클래스는 바로 값이 나옴
        // 래퍼클래스는 내부 처리가 되어있기에 참조형 변수라도 값인 숫자가 출력

        // Integer 래퍼클래스 기능 중 toString이 있다
        String numStr = num.toString();

        // 직접 만든 래퍼클래스
        CustomInteger myInteger = new CustomInteger(10);
        String myStrInteger = myInteger.toString();
        System.out.println("myStrInteger = " + myStrInteger);
    }

오토박싱 vs 언박싱
래퍼클래스와 기본형 사이 형변환 굉장히 자주 일어남
Java 에서는 이러한 형 변환을 자동 지원

오토박싱
기본형 -> 래퍼형 으로 변환하는 과정 오토박싱
Integer num3 = 10; --> 오토박싱
내부적으로 기본형 -> 래퍼형으로 자동처리

오토언박싱(언박싱)
래퍼형 -> 기본형 으로 변환하는 과정 오토언박싱
Integer num3 = 10;
int num = num3; --> 오토언박싱
내부적으로 래퍼형 -> 기본형으로 자동 처리

기본형과 래퍼형 성능 비교
래퍼형은 내부적으로 데이터 감싸고 있기에 연산시 기본형보다 느림,
빠른작업 시엔 기본형 쓰는게 좋은 작업


2-4 static
static 키워드 --> 모든 객체가 함께 사용하는 변수나 메서드 만들 때 사용
객체(인스턴스) 만들지 않아도 클래스 이름만으로 사용 가능
모든 객체가 같은 값 공유
static 변수와 메서드는 한 번만 생성, Method Area(메서드 영역)에 저장
static 키워드는 변수,  메서드에 붙일 수 있다.

인스턴스 멤버(인스턴스 변수 + 인스턴스 메서드)?
객체를 만들때 마다 생성되는 변수와 메서드
객체 생성 후에만 사용 가능
각 객체가 개별적 값,
Heap 영역에 위치

인스턴스 메서드?
객체 속성 활용하는 메서드, 객체 생성 후에만 사용 가능

클래스 멤버(클래스 변수 + 클래스 메서드)
클래스 자체에 속하는 변수와 메서드 의미
static 키워드 사용해서 선언합니다

주의사항
static - 공용 사용할 변수, 메서드에만 적용해야
static 메서드에서 this.로 인스턴스 변수 접근 X - 인스턴스 객체 생성이 우선되어야 하기 때문
static 꼭 필요할 때만 사용해야 - 변수와 메모리는 프로그램이 종료될 때 까지 메모리에 유지되기에

2-5 final
--> 변수는 변경이 불가능하게
--> 클래스는 상속할 수 없게
--> 메서드는 수정할 수 없게(오버라이딩 불가)

상수 - 변하지 않고 항상 일정한 값 갖는 수
--> Java 에선 대문자로 표현하는게 관례
--> 실행중 절대 변경되서는 안되기에 static final 키워드로 선언

불변객체
--> 내부 상태를 변경할 수 없는 객체
--> final을 속성에 활용(property, field)
--> 세터 없이 설계(내부 상태 변경 X기에)
--> 변경 필요 경우 새로운 객체 만들어야
--> String, Integer, 래퍼클래스 등


2-6 인터페이스
인터페이스
클래스가 따라야 할 최소한의 공통 규칙을 정의하는 역할

사용이유?
모든 설계에 표준이 있는 이유와 동일
개발자마다 서로 다른방식으로 만든다면 일관성 깨짐
인터페이스로 최소한의 규격 정의
세부 구현은 각 클래스에 맡김
일관성 유지하며 클래스가 고유한 특생으로 확장 가능하도록

자동차를 예시로 인터페이스

인터페이스 기능
인터페이스 다중구현, 인터페이스 다중상속

다중구현? implements 키워드로 다수의 인터페이스 구현 가능
한 개의 클래스가 여러 인터페이스 구현 한 경우 다중구현
package chapter2.interfaceexample.v1;

public class Bird implements Animal, Flyable {
    @Override
    public void eat() {

    }

    @Override
    public void fly() {

    }
}



다중상속?
extends 키워드로 상속 구현 가능
이후 수업에서 더 다룸


인터페이스에 변수 선언하는 경우 형식에 관곙벗이 자동으로 상수로 선언
--> public static final로 선언

2-7 캡슐화(접근제어자)
객체 정보를 외부에서 직접 접근하지 못하게 보호하는 개념,
캡슐처럼 감싸 내부를 보호하고 외부로부터 내용을 숨기는 모습에서 유래
클래스 혹은 객체의 캡슐화

캡슐화를 구현하기 위해선 접근제어자를 이해해야
접근제어자 --> 클래스, 변수, 메서드, 생성자의 접근 범위를 제한하는 키워드

접근제어자 | 클래스 내부 패키지 내부 상속한 클래스 전체 공개
public       ✅       ✅        ✅       ✅
protected    ✅       ✅        ✅       ❌
default      ✅       ✅        ❌       ❌
private      ✅       ❌        ❌       ❌

데이터 접근
게터와 세터
--> 캡슐화가 잘 적용된 클래스는 내부 데이터를 private
--> 데이터 조회나 변경 필요하면 안전한 접근방법 필요
--> 그 역할을 수행하는 메서드가 게터와 세터

게터 )
public class Person {
    private String secret;

    public String getSecret() {
		    return this.secret; // ✅ 객체의 secret 속성 반환
    }
}

public class Main {
    public static void main(String[] args) {
		    Person p1 = new Person();
		    p1.secret; // ❌ 직접 접근 불가능
		    String newSecret = p1.getSecret(); // ✅ 게터를 활용해 접근가능
    }
}

세터 )
public class Person {
    private String secret;

    public void setSecret(String secret) {
		    this.secret = secret; // ✅ secret 속성 설정 및 변경
    }
}

public class Main {
    public static void main(String[] args) {
		    Person p1 = new Person();
		    p1.secret = "password"; // ❌ 직접접근, 변경 불가능
		    p1.setSecret("newPassword"); // ✅ 세터를 활용해 접근, 변경가능
    }
}

무분별한 세터?
접근을 막아놓고 세터로 무분별하게 접근가능하게 할 경우, 혹은 불필요한 세터 활용

// 무분별한 세터
public void setRightArm(...
public void setRightLeg(...
public void setLeftArm(...
public void setLeftLeg(...

// 의미있는 세터
public void walk(boolean power){
    this.leftLeg = power;
    this.leftArm = power;
    this.rightLeg = power;
    this.rightArm = power;
}

2-8 상속
클래스간 관계를 부모(상위), 자식(하위)로 바라보는 개념
--> 이 구조로 재사용성, 확장이 가능
--> 물려받은 속성과 기능은 자식 클래스에서 재사용할 수도 있고, 확장할 수도 있음
--> extends 키워드를 사용해 상속관계를 구현
--> 코드중복 줄이고 유지보수성 높일 수

super - 부모 인스턴스
--> 부모 클래스 멤버에 접근 시 사용하는 키워드

super() - 부모인스턴스의 생성자
--> 부모가 먼저 생성되어야 하므로 super()은 항상 생성자 첫줄에 위치해야

재사용성, 확장, 재정의(오버라이딩)
추상클래스 abstract - abstract 키워드로 클래스를 선언하면 추상클래스
--> 객체를 생성할 목적이 아닌 설계도 역할할 때 적합
--> 공통 기능을 제공하며 하위 클래스에서 특정 메서드 구현을 강제하기 위해 사용됨

추상클래스와 인터페이스 차이
--> 상속이 계층적 구조 선언하기에 적합
--> 인터페이스는 표준 제공에 적합
--> 인터페이스는 인스턴스 변수 선언 불가
--> 계층적 구조 표현하며 공통 속성과 기능 재사용 시 추상클래스 사용 적합

2-9 추상화
특정 계층에서 필요한 본질적 특성만 유지, 불필요한 사항을 숨기는 객체지향의 특징

ex. 고양이 -> 동물 -> 생명체
객체지향 프로그래밍에서는 추상화의 계층적 특징을 통해 유지보수성 좋은 프로그램 만들 수 있음
이런 추상화 특징 활용할 수 있다는 것이 객체지향의 3번째 특징
--> 계층구조 구현? 자바의 특징(인터페이스 상속, 클래스 상속)으로 구현
추상화 특징은 다형성에서 활용됨
그러니, 계층마다 존재하는 특성만 유지한다는 거는
생명체(존재하는가? 메서드) -> 동물(울음소리 메서드) -> 고양이(스크래치 메서드)
각 고유 계층에 맞는 특성을 구현해서 추상화를 구현

2-10 다형성
하나의 타입으로 여러 객체를 다룰 수 있는 기술
업 캐스팅? 자식 -> 부모
다운 캐스팅? 부모 -> 자식

형변환을 통해 타입 다른 것 끼리 다룰 수 있음(부모타입으로 자식타입 다룰 수 있는 이유)

LiftForm -> Animal -> Dog, Cat 일 때

package chapter2.polymorphism;

public class Main {
    public static void main(String[] args) {
        // 다형성 활용
        // 한 가지 데이터 타입으로 두 가지 객체를 담는다

        Animal animal1 = new Cat();
        Animal animal2 = new Dog();

        animal1.exist();
        animal1.maksSound();

        animal2.exist();
        animal2.maksSound();

        // 업캐스팅 주의사항?
        // cat, dog의 고유기능 사용 X - scratch, wag 사용 불가
        // 다운캐스팅 해줘야
        Cat cat = (Cat) animal1;
        Dog dog = (Dog) animal2;

        cat.scratch();
        dog.wag();



        // 잘못된 다운캐스팅?
        //   Cat cat2 = (Cat) animal2; // animal2 = Dog; 이기에 X!!

        // 다운 캐스팅 시 instanceof 활용 방법
        if (animal2 instanceof Cat) {
            Cat cat2 = (Cat) animal2;
            cat2.scratch();
        } else {
            System.out.println("객체가 고양이가 아닙니다");
        }

        // 다형성의 장점 --> Animal 데이터 타입 하나로도 가능하게
        Animal[] animals = {new Cat(), new Dog(), new Cat()};
        System.out.println("::::");
        for (Animal animal : animals) {
            animal.maksSound();
        }


    }
}


자식타입 고유 기능을 사용할 수 없기에, 다운캐스팅이 필요
다만 위와같은 잘못된 다운캐스팅은 컴파일 단계에서 감지불가하기에 instanceOf 처리해야

다형성의 장점??
한 타입으로 유연한 프로그래밍 가능하다

3-1 예외와 예외처리
예외(Exception)
프로그램 실행 중 예상하지 못한 상황이 발생하는 것을 의미
의도적으로 예외 발생 시킬땐 throw 키워드를 통해 발생
예외 처리 하지 않으면 프로그램 중단될 수
그래서 예외처리(try-catch)를 통해 프로그램이 안정적으로 실행되게 할 수 있음

10/0 과 같은 연산?
ArithmeticException(산술예외) 발생함
public class Main {
    public static void main(String[] args) {
        System.out.println("프로그램 시작");
        int result = 10 / 0; // ❌ 예외 발생 (ArithmeticException)
        System.out.println("이 문장은 실행되지 않음");
    }
}
Exception in thread "main" java.lang.ArithmeticException: / by zero
	at chapter3.exception.Main.main(Main.java:8)

Process finished with exit code 1

의도적인 예외 - throw
특정 조건에서 의도적으로 예외 발생 가능
thorw 활용하면 예외 명확히 정의, 제어 가능!
public class Main {
    public static void main(String[] args) {
        int age = 10;
        if (age < 18) {
		        // ✅ 의도적으로 예외를 발생시키는 부분
            throw new IllegalArgumentException("미성년자는 접근할 수 없습니다!");
        }
        System.out.println("....");
    }
}

예외구조와 종류
--> RuntimeException? UncheckedException
RuntimeException 을 상속받는 모든 예외를 UncheckedException 이라고 합니다.
예외처리를 컴파일러가 확인하지 않음

--> Exception? CheckedException
Exception 클래스를 직접 상속받는 모든 예외를 CheckedException 이라고합니다. RuntimeException과 RuntimeException 을 상속받은 예외는 제외합니다.
예외처리를 컴파일러가 확인함

예외전파
--> 메서드에서 발생한 예외가 해당 메서드 내에서 처리 X 일 때
메서드 호출한 상위 메서드로 전달되는 과정
--> 예외가 프로그램 시작지점까지 전파되고 끝내 처리되지 않으면 프로그램 비정상 종료

checkedexception - Exception 클래스를 직접 상속받는 모든 예외
컴파일러가 예외처리를 강제함, 안하면 빨간줄. 그래서 try-catch로 예외 처리하거나
throws 키워드 써야


3-2 Optional - null을 다루는 법
Optional 객체는 null을 안전하게 다루게 해주는 객체
null을 직접다루는 대신 optional 을 사용하면
nullPointerException 방지 가능

Optional 객체는 값이 있을수도, 없을수도 있는 컨테이너라고 생각
--> isPresent()와 같은 메서드를 통해서 안전하게 null 처리 가능하다

3-3 Collection
배열의 한계
선언과 동시 길이 설정 필요
컬렉션?
ArrayList<Integer> arrayList = new ArrayList<Integer>(); - 요 뒤에 Integer은 생략 O
arrayList.add(10);
arrayList.add(20);
arrayList.add(30);
요렇게

컬렉션 종류와 특징
인터페이스         특징                구현체
List      순서 유지, 중복 허용        ArrayList
Set       순서 없음, 중복 불가        HashSet
Map      키-값 구조, 키 중복 불가      HashMap

// List 를 구현한 ArrayList
ArrayList<String> names = new ArrayList<>();
names.add("Spartan");      // 1 번째 요소 추가
names.add("Steve");        // 2 번째 요소 추가
names.add("Isac");         // 3 번째 요소 추가
names.add("1");
names.add("2");

 // ✅ 순서 보장
System.out.println("names = " + names);

// ✅ 중복 데이터 허용
names.add("Spartan");
System.out.println("names = " + names);

// ✅ 단건 조회
System.out.println("1 번째 요소 조회: " + names.get(0)); // 조회 Spartan

// ✅ 데이터 삭제
names.remove("Steve");
System.out.println("names = " + names);


// Set 을 구현한 HashSet
HashSet<String> uniqueNames = new HashSet<>();

// ✅ 추가
uniqueNames.add("Spartan");
uniqueNames.add("Steve");
uniqueNames.add("Isac");
uniqueNames.add("1");
uniqueNames.add("2");

// ⚠️ 순서를 보장 안함
System.out.println("uniqueNames = " + uniqueNames);
uniqueNames.get(0); // ❌ get 사용 불가

// ⚠️ 중복 불가
uniqueNames.add("Spartan");
System.out.println("uniqueNames = " + uniqueNames);

// ✅ 제거
uniqueNames.remove("Spartan");
System.out.println("uniqueNames = " + uniqueNames);


// Map 을 구현한 HashMap
HashMap<String, Integer> memberMap = new HashMap<>();

// ✅ 추가
memberMap.put("Spartan", 15);
memberMap.put("Steve", 15); // ✅ 값은 중복 가능
memberMap.put("Isac", 1);
memberMap.put("John", 2);
memberMap.put("Alice", 3);

// ⚠️ 순서 보장 안함
System.out.println("memberMap = " + memberMap);

// ⚠️ 키 중복 불가: 값 덮어쓰기 발생
memberMap.put("Alice", 5);
System.out.println("memberMap = " + memberMap);

// ✅ 조회: 15
System.out.println(memberMap.get("Steve"));

// ✅ 삭제 가능
memberMap.remove("Spartan");
System.out.println("memberMap = " + memberMap);

// ✅ 키 확인
Set<String> keys = memberMap.keySet();
System.out.println("keys = " + keys);

// ✅ 값 확인
Collection<Integer> values = memberMap.values();
System.out.println("values = " + values);

3-4 제네릭